package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.Person;

public class PersonRepository {

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private Connection connection;
	private String createTableSql = 
			"CREATE TABLE person("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(20),"
			+ "surname VARCHAR(50),"
			+ "age int"
			+ ")";
	private String insertSql = "INSERT INTO person(name, surname, age) VALUES (?,?,?)";
	private String deleteSql = "DELETE FROM person WHERE id=?";	
	private String updateSql = "UPDATE person SET name = ?, surname = ?, age = ? WHERE id = ?";
	private String getSql = "SELECT * FROM person WHERE id = ?";
	private String listSql = "SELECT * FROM person";
	
	Statement createTable;
	PreparedStatement insert;
	PreparedStatement delete;
	PreparedStatement update;
	PreparedStatement get;
	PreparedStatement list;
	
	public PersonRepository(){
		
		try {
			
			connection = DriverManager.getConnection(url);
			createTable = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while(rs.next()){
				if("person".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
					tableExists=true;
					break;
				}
			}
			if(!tableExists)
				createTable.executeUpdate(createTableSql);
				
			insert = connection.prepareStatement(insertSql);
			delete = connection.prepareStatement(deleteSql);
			update = connection.prepareStatement(updateSql);
			get = connection.prepareStatement(getSql);
			list = connection.prepareStatement(listSql);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void delete(Person p){
		try{
			delete.setInt(1, p.getId());
			delete.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}

	public void update(Person p){
		try{
			update.setString(1, p.getName());
			update.setString(2, p.getSurname());
			update.setInt(3, p.getAge());
			update.setInt(4, p.getId());
			update.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}

	public Person get(int id){
		Person p = new Person();

		try {
			get.setInt(1, id);
			ResultSet rs = get.executeQuery();
			rs.next();
			p.setId(rs.getInt("id"));
			p.setName(rs.getString("name"));
			p.setSurname(rs.getString("surname"));
			p.setAge(rs.getInt("age"));

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return p;
	}

	public List<Person> getAll(){
		List<Person> persons = new ArrayList<Person>();

		try {
			ResultSet rs = list.executeQuery();

			while (rs.next()) {
				Person p = new Person();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setSurname(rs.getString("surname"));
				p.setAge(rs.getInt("age"));
				persons.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return persons;
	}
	
	
	public void add(Person p){
		try{
			insert.setString(1, p.getName());
			insert.setString(2, p.getSurname());
			insert.setInt(3, p.getAge());
			insert.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
}










